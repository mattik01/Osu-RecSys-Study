

##################### CREATE USERS TABLE ########################ä#
CREATE TABLE USERS AS
SELECT 
    su.user_id,
    su.username,
    ous.accuracy,
    ous.accuracy_new,
    ous.playcount,
    ous.rank,
    ous.fail_count,
    ous.exit_count,
    ous.max_combo,
    ous.country_acronym,
    ous.last_played,
    ous.total_seconds_played
FROM sample_users su
JOIN osu_user_stats ous ON su.user_id = ous.user_id;




##################### CREATE SCORES_HIGH TABLE ########################ä#

############## 1. Add index on playcount table
ALTER TABLE osu_user_beatmap_playcount
ADD INDEX idx_user_beatmap (user_id, beatmap_id);

############## 2. Merge and CREATE
CREATE TABLE scores_high AS
SELECT
  s.score_id,
  s.beatmap_id,
  s.user_id,
  s.score,
  s.pp,
  s.maxcombo,
  s.rank,
  s.enabled_mods,
  s.date,
  COALESCE(p.playcount, 0) AS playcount,
  CASE
    WHEN (s.count50 + s.count100 + s.count300 + s.countmiss) = 0 THEN NULL
    ELSE ROUND(
      (
        (50 * s.count50 + 100 * s.count100 + 300 * s.count300)
        / (300.0 * (s.count50 + s.count100 + s.count300 + s.countmiss))
      ) * 100, 4
    )
  END AS accuracy
FROM osu_scores_high s
LEFT JOIN (
  SELECT user_id, beatmap_id, MAX(playcount) AS playcount
  FROM osu_user_beatmap_playcount
  GROUP BY user_id, beatmap_id
) p
  ON s.user_id = p.user_id AND s.beatmap_id = p.beatmap_id;




##################### CREATE BEATMAPS TABLE ########################ä#
CREATE TABLE beatmaps AS
SELECT 
    d.beatmap_id,
    b.beatmapset_id,
    b.user_id AS creator_user_id,
    d.mods,
    
    b.playcount,
    b.passcount,
    s.favourite_count AS set_favourite_count,

    s.artist,
    s.title,
    s.genre_id,
    s.language_id,
    s.submit_date,
    s.approved_date,
    
    b.bpm,
    b.hit_length,

    b.countTotal AS count_total,
    b.countNormal AS count_normal,
    b.countSlider AS count_slider,
    b.countSpinner AS count_spinner,
    b.diff_drain,
    b.diff_size,
    b.diff_overall,
    b.diff_approach,
    d.diff_unified AS diff_star_rating,
    
    -- Pivoted difficulty attributes
    MAX(CASE WHEN a.attrib_id = 1 THEN a.value END) AS aim,
    MAX(CASE WHEN a.attrib_id = 3 THEN a.value END) AS speed,
    MAX(CASE WHEN a.attrib_id = 9 THEN a.value END) AS max_combo,
    MAX(CASE WHEN a.attrib_id = 11 THEN a.value END) AS strain,
    MAX(CASE WHEN a.attrib_id = 19 THEN a.value END) AS slider_factor,
    MAX(CASE WHEN a.attrib_id = 21 THEN a.value END) AS speed_note_count,
    MAX(CASE WHEN a.attrib_id = 23 THEN a.value END) AS speed_difficult_strain_count,
    MAX(CASE WHEN a.attrib_id = 25 THEN a.value END) AS aim_difficult_strain_count

FROM 
    osu_beatmap_difficulty d
LEFT JOIN 
    osu_beatmap_difficulty_attribs a ON d.beatmap_id = a.beatmap_id 
                                     AND d.mode = a.mode 
                                     AND d.mods = a.mods
LEFT JOIN
    osu_beatmaps b ON d.beatmap_id = b.beatmap_id
LEFT JOIN
    osu_beatmapsets s ON b.beatmapset_id = s.beatmapset_id
WHERE 
    d.mode = 0 
    AND d.mods IN (0, 16, 64, 80)  -- NM, HR, DT, DTHR
    AND a.attrib_id IN (1, 3, 9, 11, 19, 21, 23, 25)
GROUP BY 
    d.beatmap_id, d.mods, d.diff_unified,
    b.beatmapset_id, b.user_id, b.total_length, b.hit_length,
    b.countTotal, b.countNormal, b.countSlider, b.countSpinner,
    b.diff_drain, b.diff_size, b.diff_overall, b.diff_approach,
    b.difficultyrating, b.playcount, b.passcount, b.bpm,
    s.artist, s.title, s.tags, s.genre_id, s.language_id,
    s.favourite_count, s.track_id, s.submit_date, s.approved_date;



################## Combined BEATMAP TABLE
CREATE TABLE `combined_beatmaps` AS
SELECT *
FROM `2025_05_01_performance_osu_random_10000`.`beatmaps`

UNION

SELECT *
FROM `2025_05_01_performance_osu_top_10000`.`beatmaps`;
